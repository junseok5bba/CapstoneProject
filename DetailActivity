package com.sample.walkcourse.ui

import android.content.Intent
import android.graphics.Color
import android.net.Uri
import android.os.Bundle
import android.util.Log
import androidx.appcompat.app.AppCompatActivity
import androidx.fragment.app.FragmentActivity
import com.google.android.gms.maps.CameraUpdateFactory
import com.google.android.gms.maps.GoogleMap
import com.google.android.gms.maps.OnMapReadyCallback
import com.google.android.gms.maps.SupportMapFragment
import com.google.android.gms.maps.model.*
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.database.DataSnapshot
import com.google.firebase.database.DatabaseError
import com.google.firebase.database.FirebaseDatabase
import com.google.firebase.database.ValueEventListener
import com.google.gson.Gson
import com.google.maps.android.data.kml.KmlLayer
import com.sample.walkcourse.R
import com.sample.walkcourse.extension.getJsonAsset
import com.sample.walkcourse.extension.toast
import com.sample.walkcourse.ui.comment.Comment
import com.sample.walkcourse.ui.comment.CommentAdapter
import com.sample.walkcourse.ui.home.data.CourseData
import io.ticofab.androidgpxparser.parser.GPXParser
import io.ticofab.androidgpxparser.parser.domain.Gpx
import kotlinx.android.synthetic.main.activity_detail.*
import org.xmlpull.v1.XmlPullParserException
import java.io.ByteArrayInputStream
import java.io.IOException


class DetailActivity : AppCompatActivity(), OnMapReadyCallback {
    private val course  by lazy { intent.getParcelableExtra("course") as CourseData }
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_detail)
        val mapFragment = supportFragmentManager
            .findFragmentById(R.id.map) as SupportMapFragment?
        mapFragment!!.getMapAsync(this)

        bind_way.setOnClickListener {
            val latitude = "126.9854131"
            val longitude = "37.5302862"

            val uri = Uri.parse("tmap://route?goalx=$latitude&goaly=$longitude")
            val intent = Intent(Intent.ACTION_VIEW, uri)
            startActivity(intent)
        }

        detail_title.text = course.walk_name + " " + course.course_name
        length_distance.text = course.distance_km.toString() + "km"
        time.text = course.time
        level.text = course.level

        detail_course_desc.text = course.course_desc
        detail_toilit.text = course.toilet
        detail_water.text = course.water
        detail_mart.text = course.mart
}

private fun gpx(name: String, googleMap: GoogleMap) {
        val mParser = GPXParser() // con    sider injection
        var parsedGpx: Gpx? = null

        val input  = getJsonAsset(name)
        val inputStream = ByteArrayInputStream(input.toByteArray(Charsets.UTF_8))

        try {
            parsedGpx = mParser.parse(inputStream)
        } catch (e: IOException) { // do something with this exception
            e.printStackTrace()
        } catch (e: XmlPullParserException) {
            e.printStackTrace()
        }
        if (parsedGpx == null) { // error parsing track
        } else {
            var swit = false
            parsedGpx?.let { gpx ->
                gpx.routes.forEach {
                    //Log.d("DetailActivity" + it.)
                }

                gpx.tracks.forEach {


                    it.trackSegments.forEach {
                        val bound = arrayListOf<LatLngBounds>()
                        val builder = LatLngBounds.builder()

                        it.trackPoints.forEachIndexed { index, trackPoint ->
                            if (index == 0) {
                                googleMap.moveCamera(CameraUpdateFactory.newLatLng(LatLng(trackPoint.latitude, trackPoint.longitude)))
                            }

                            builder.include(LatLng(trackPoint.latitude, trackPoint.longitude))

                            if (index != 0) {
                                val previous = it.trackPoints[index-1]
                                val line: Polyline = googleMap.addPolyline(
                                    PolylineOptions()
                                        .add(LatLng(previous.latitude, previous.longitude), LatLng(trackPoint.latitude, trackPoint.longitude))
                                        .width(5f)
                                        .color(Color.RED)
                                )
                            }

                            bound.add(builder.build())
                            Log.d("DetailActivity", trackPoint.latitude.toString())
                            Log.d("DetailActivity", trackPoint.longitude.toString())
                        }

                        if (bound.isNotEmpty()) {
                            if (!swit) {
                                googleMap.moveCamera(CameraUpdateFactory.newLatLngBounds(builder.build(), 50))
                                swit = true
                            }
                        }
                    }
                }
            }
        }
    }

    private fun kml(name: String, googleMap: GoogleMap) {

        val builder = LatLngBounds.builder()

        Log.d("File ", name)
        val input  = getJsonAsset(name)
        val kmlInputStream = ByteArrayInputStream(input.toByteArray(Charsets.UTF_8))
        val layer = KmlLayer(googleMap, kmlInputStream, applicationContext)
        layer.addLayerToMap()

        Log.d("hasPlaceMarks", layer.hasPlacemarks().toString())
    }

    override fun onMapReady(googleMap: GoogleMap?) {
        googleMap?.let {
            googleMap.uiSettings.isZoomControlsEnabled = true
            googleMap.setOnMapLoadedCallback {

                val ext = course.gpx.substring(course.gpx.length-3, course.gpx.length)

                Log.d("course.gpx ", course.gpx)
                Log.d("course.gpx ", ext)

                if (ext == "gpx") {
                    gpx(course.gpx, googleMap)
                } else if (ext == "kml") {
                    kml(course.gpx, googleMap)
                }
            }
        }

    }
