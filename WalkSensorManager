package com.sample.walkcourse.walk

import android.content.Context
import android.hardware.Sensor
import android.hardware.SensorEvent
import android.hardware.SensorEventListener
import android.hardware.SensorManager
import android.util.Log
import androidx.lifecycle.Lifecycle
import androidx.lifecycle.LifecycleObserver
import androidx.lifecycle.OnLifecycleEvent

/**
 라이프사이클에 맞게 센서를 연결 및 해제하고
 센서매니저를 활용하는 워크센서매니저.
 */
class WalkSensorManager(
    private var sensorManager: SensorManager,
    private val walkCount: (value: Float) -> Unit) : LifecycleObserver, SensorEventListener {

    private val stepDetectorSensor: Sensor? =  sensorManager.getDefaultSensor(Sensor.TYPE_STEP_DETECTOR)
    private val stepCountSensor: Sensor? =  sensorManager.getDefaultSensor(Sensor.TYPE_STEP_COUNTER)

    /**
     OnResume 라이프이클 함수 시 연결
     */
    @OnLifecycleEvent(Lifecycle.Event.ON_RESUME)
    fun connectListener() {
        Log.d("WalkSensorManager", "connectListener")
        stepDetectorSensor?.let {
            sensorManager.registerListener(this, stepDetectorSensor, SensorManager.SENSOR_DELAY_FASTEST)
        }

        stepCountSensor?.let {
            sensorManager.registerListener(this, stepCountSensor, SensorManager.SENSOR_DELAY_FASTEST)
        }
    }

    /**
     ON_PAUSE 라이프이클 함수 시 연결해제.
     */
    @OnLifecycleEvent(Lifecycle.Event.ON_PAUSE)
    fun disconnectListener() {
        Log.d("WalkSensorManager", "disconnectListener")
        sensorManager.unregisterListener(this)
    }

    override fun onAccuracyChanged(sensor: Sensor?, p1: Int) {

    }

    /**
    SenSor의 값을 받아오는 리스너 함수.
     */
    override fun onSensorChanged(event: SensorEvent?) {
        event?.let {
            when(event.sensor.type) {
                Sensor.TYPE_STEP_DETECTOR -> {
                    if (event.values.isNotEmpty()) {
                        walkCount(event.values[0])
                        Log.d("WalkSensorManager", event.values[0].toString())
                    } else {

                    }
                }
                Sensor.TYPE_STEP_COUNTER -> {
                    if (event.values.isNotEmpty()){
                        //walkCount(event.values[0])
                        Log.d("WalkSensorManager", event.values[0].toString())
                    } else {

                    }
                }
                else -> {

                }
            }
        }
    }
}
