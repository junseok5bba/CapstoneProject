package com.sample.walkcourse.walk

import android.content.Context
import android.hardware.Sensor
import android.hardware.SensorEvent
import android.hardware.SensorEventListener
import android.hardware.SensorManager
import android.util.Log
import androidx.lifecycle.Lifecycle
import androidx.lifecycle.LifecycleObserver
import androidx.lifecycle.OnLifecycleEvent

class WalkSensorManager(
    private val context: Context,
    private val walkCount: (value: Float) -> Unit) : LifecycleObserver, SensorEventListener {
    private var sensorManager: SensorManager = context.getSystemService(Context.SENSOR_SERVICE) as SensorManager
    private val stepDetectorSensor: Sensor =  sensorManager.getDefaultSensor(Sensor.TYPE_STEP_DETECTOR)
    private val stepCountSensor: Sensor =  sensorManager.getDefaultSensor(Sensor.TYPE_STEP_COUNTER)


    @OnLifecycleEvent(Lifecycle.Event.ON_RESUME)
    fun connectListener() {
        Log.d("WalkSensorManager", "connectListener")
        sensorManager.registerListener(this, stepDetectorSensor, SensorManager.SENSOR_DELAY_FASTEST)
        sensorManager.registerListener(this, stepCountSensor, SensorManager.SENSOR_DELAY_FASTEST)
    }

    @OnLifecycleEvent(Lifecycle.Event.ON_PAUSE)
    fun disconnectListener() {
        Log.d("WalkSensorManager", "disconnectListener")
        sensorManager.unregisterListener(this)
    }

    override fun onAccuracyChanged(sensor: Sensor?, p1: Int) {

    }

    override fun onSensorChanged(event: SensorEvent?) {
        event?.let {
            when(event.sensor.type) {
                Sensor.TYPE_STEP_DETECTOR -> {
                    if (event.values.isNotEmpty()) {
                        walkCount(event.values[0])
                        Log.d("WalkSensorManager", event.values[0].toString())
                    } else {

                    }
                }
                Sensor.TYPE_STEP_COUNTER -> {
                    if (event.values.isNotEmpty()){
                        Log.d("WalkSensorManager", event.values[0].toString())
                    } else {

                    }
                }
                else -> {

                }
            }
        }
    }
}
